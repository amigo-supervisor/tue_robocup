#! /usr/bin/env python

# System
import os

# Qt
from python_qt_binding import loadUi
from python_qt_binding.QtCore import QTimer
from python_qt_binding.QtWidgets import QApplication
from python_qt_binding.QtWidgets import QWidget

# ROS
import rospkg
import rospy
import std_msgs.msg


SENSOR_RANGE = (5, 500)  # Range in mm


class Side(object):
    LEFT = "left"
    RIGHT = "right"


class GraspSensorSimulator(QWidget):
    """
    QWidget to simulate the distance sensors on the grippers
    """
    def __init__(self):
        """
        Constructor
        """
        super(GraspSensorSimulator, self).__init__()

        # Load the UI file
        package_path = rospkg.RosPack().get_path("test_tools")
        ui_filename = os.path.join(package_path, "resource", "grasp_sensor.ui")
        loadUi(ui_filename, self)

        # Connect the sliders to the indicators
        self.left_slider.valueChanged.connect(self.left_indicator.display)
        self.right_slider.valueChanged.connect(self.right_indicator.display)

        # Setup the sliders
        self.left_slider.setRange(SENSOR_RANGE[0], SENSOR_RANGE[1])
        self.left_slider.setValue(SENSOR_RANGE[1])
        self.right_slider.setRange(SENSOR_RANGE[0], SENSOR_RANGE[1])
        self.right_slider.setValue(SENSOR_RANGE[1])

        # Setup the ROS publishers
        self._left_pub = rospy.Publisher("/amigo/left_gripper/sensor_distance", std_msgs.msg.Float32, queue_size=1)
        self._right_pub = rospy.Publisher("/amigo/right_gripper/sensor_distance", std_msgs.msg.Float32, queue_size=1)

        # Start a QThread to continuously publish the sensor values
        self._timer = QTimer(self)
        self._timer.timeout.connect(self._publish_values)
        self._timer.start(50)

        # Show the widget
        self.show()

    def _publish_values(self):
        """
        Publishes the current sensor values (converted from mm to m)
        """
        left_msg = std_msgs.msg.Float32()
        left_msg.data = 0.001 * self.left_indicator.value()
        self._left_pub.publish(left_msg)

        right_msg = std_msgs.msg.Float32()
        right_msg.data = 0.001 * self.right_indicator.value()
        self._right_pub.publish(right_msg)


if __name__ == "__main__":

    # Init rosnode
    rospy.init_node("grasp_sensor_simulator")

    # Start the UI
    app = QApplication([])
    grasp_sensor_sim = GraspSensorSimulator()
    grasp_sensor_sim.show()
    app.exec_()
