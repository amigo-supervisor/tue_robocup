#! /usr/bin/env python

# System
import sys

# ROS
import PyKDL as kdl
import rospy

# Robot skills
import robot_skills.util.kdl_conversions as kdl_conversions
from robot_skills.util.robot_constructor import robot_constructor

TESTSET = [
    (0.3, 0.1, 0.4, True),
    (0.3, 0.1, 0.5, False),
    (0.3, 0.1, 0.6, False),
    (0.3, 0.1, 0.7, False),
    (0.3, 0.1, 0.8, False),
    (0.3, 0.1, 0.9, False),
    (0.3, 0.2, 0.4, False),
    (0.3, 0.2, 0.5, True),
    (0.3, 0.2, 0.6, False),
    (0.3, 0.2, 0.7, False),
    (0.3, 0.2, 0.8, False),
    (0.3, 0.2, 0.9, False),
    (0.3, 0.3, 0.4, False),
    (0.3, 0.3, 0.5, True),
    (0.3, 0.3, 0.6, False),
    (0.3, 0.3, 0.7, False),
    (0.3, 0.3, 0.8, False),
    (0.3, 0.3, 0.9, False),
    (0.3, 0.4, 0.4, False),
    (0.3, 0.4, 0.5, True),
    (0.3, 0.4, 0.6, False),
    (0.3, 0.4, 0.7, False),
    (0.3, 0.4, 0.8, False),
    (0.3, 0.4, 0.9, False),
    (0.4, 0.1, 0.4, False),
    (0.4, 0.1, 0.5, True),
    (0.4, 0.1, 0.6, False),
    (0.4, 0.1, 0.7, False),
    (0.4, 0.1, 0.8, False),
    (0.4, 0.1, 0.9, False),
    (0.4, 0.2, 0.4, False),
    (0.4, 0.2, 0.5, True),
    (0.4, 0.2, 0.6, False),
    (0.4, 0.2, 0.7, False),
    (0.4, 0.2, 0.8, False),
    (0.4, 0.2, 0.9, False),
    (0.4, 0.3, 0.4, False),
    (0.4, 0.3, 0.5, False),
    (0.4, 0.3, 0.6, False),
    (0.4, 0.3, 0.7, False),
    (0.4, 0.3, 0.8, False),
    (0.4, 0.3, 0.9, False),
    (0.4, 0.4, 0.4, False),
    (0.4, 0.4, 0.5, False),
    (0.4, 0.4, 0.6, False),
    (0.4, 0.4, 0.7, False),
    (0.4, 0.4, 0.8, False),
    (0.4, 0.4, 0.9, False),
    (0.5, 0.1, 0.4, True),
    (0.5, 0.1, 0.5, False),
    (0.5, 0.1, 0.6, False),
    (0.5, 0.1, 0.7, False),
    (0.5, 0.1, 0.8, False),
    (0.5, 0.1, 0.9, False),
    (0.5, 0.2, 0.4, True),
    (0.5, 0.2, 0.5, False),
    (0.5, 0.2, 0.6, False),
    (0.5, 0.2, 0.7, False),
    (0.5, 0.2, 0.8, False),
    (0.5, 0.2, 0.9, False),
    (0.5, 0.3, 0.4, True),
    (0.5, 0.3, 0.5, False),
    (0.5, 0.3, 0.6, False),
    (0.5, 0.3, 0.7, False),
    (0.5, 0.3, 0.8, False),
    (0.5, 0.3, 0.9, False),
    (0.5, 0.4, 0.4, True),
    (0.5, 0.4, 0.5, False),
    (0.5, 0.4, 0.6, False),
    (0.5, 0.4, 0.7, False),
    (0.5, 0.4, 0.8, False),
    (0.5, 0.4, 0.9, False),
    (0.6, 0.1, 0.4, True),
    (0.6, 0.1, 0.5, True),
    (0.6, 0.1, 0.6, False),
    (0.6, 0.1, 0.7, False),
    (0.6, 0.1, 0.8, False),
    (0.6, 0.1, 0.9, False),
    (0.6, 0.2, 0.4, True),
    (0.6, 0.2, 0.5, True),
    (0.6, 0.2, 0.6, False),
    (0.6, 0.2, 0.7, False),
    (0.6, 0.2, 0.8, False),
    (0.6, 0.2, 0.9, False),
    (0.6, 0.3, 0.4, True),
    (0.6, 0.3, 0.5, True),
    (0.6, 0.3, 0.6, False),
    (0.6, 0.3, 0.7, False),
    (0.6, 0.3, 0.8, False),
    (0.6, 0.3, 0.9, False),
    (0.6, 0.4, 0.4, True),
    (0.6, 0.4, 0.5, True),
    (0.6, 0.4, 0.6, False),
    (0.6, 0.4, 0.7, False),
    (0.6, 0.4, 0.8, False),
    (0.6, 0.4, 0.9, False),
]


if __name__ == "__main__":

    if len(sys.argv) < 2:
        print "Using amigo"
        robot_name = "amigo"
    else:
        robot_name = sys.argv[1]

    # Init rosnode
    rospy.init_node("arm_test")

    # Construct robot object
    robot = robot_constructor(robot_name)

    total_duration = 0.0
    nr_succeeded = 0

    testset = [(x, y, z) for x, y, z, skip in TESTSET if not skip]

    for x, y, z in testset:

        # Reset
        robot.torso.reset()
        robot.leftArm.reset()
        robot.torso.wait_for_motion_done(10.0)
        robot.leftArm.wait_for_motion_done(10.0)

        # Create goal
        f = kdl.Frame(kdl.Vector(x, y, z))
        goal = kdl_conversions.FrameStamped(frame=f, frame_id="{}/base_link".format(robot.robot_name))

        # Send goal and log time
        start_stamp = rospy.Time.now()
        succeeded = robot.leftArm.send_goal(goal, pre_grasp=True, timeout=100.0)
        end_stamp = rospy.Time.now()
        duration = (end_stamp - start_stamp).to_sec()

        # Log stuff
        if succeeded:
            total_duration += duration
            nr_succeeded += 1

        print "{} ({}): {} seconds".format(f.p, succeeded, duration)

    print "Reaching {} goals took {} seconds, average of {} seconds".format(nr_succeeded, total_duration,
                                                                            total_duration/nr_succeeded)
